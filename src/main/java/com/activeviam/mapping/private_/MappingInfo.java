/*
 * (C) ActiveViam 2023
 * ALL RIGHTS RESERVED. This material is the CONFIDENTIAL and PROPRIETARY
 * property of ActiveViam. Any unauthorized use,
 * reproduction or transfer of this material is strictly prohibited
 */

package com.activeviam.mapping.private_;

import com.activeviam.util.private_.MigrationUtils;
import java.time.Duration;
import java.util.Map;
import java.util.TreeMap;

/**
 * Metadata information about a {@link Mapping} generated by {@link MappingGenerator}.
 *
 * @author ActiveViam
 */
public class MappingInfo {

  private final String repositoryName;

  private final String currentVersion;

  private final String targetVersion;

  private Duration executionTime;

  private final Map<String, ModuleInfo> moduleInfos = new TreeMap<>();

  /** Constructor. */
  MappingInfo(
      final String repositoryName, final String currentVersion, final String targetVersion) {
    this.repositoryName = repositoryName;
    this.currentVersion = currentVersion;
    this.targetVersion = targetVersion;
  }

  /** Returns the name of the repository. */
  public String getRepositoryName() {
    return this.repositoryName;
  }

  /** Returns the current version of the migration. */
  public String getCurrentVersion() {
    return this.currentVersion;
  }

  /** Returns the target version of the migration. */
  public String getTargetVersion() {
    return this.targetVersion;
  }

  /** Sets the total time it took to generate the {@link Mapping}. */
  void setExecutionTime(final Duration executionTime) {
    this.executionTime = executionTime;
  }

  void process(final String oldPath, final String newPath) {
    final String oldModule = MigrationUtils.extractModuleName(oldPath);
    final String newModule = MigrationUtils.extractModuleName(newPath);
    if (oldModule.equals(newModule)) {
      final ModuleInfo moduleInfo = this.moduleInfos.computeIfAbsent(newModule, ModuleInfo::new);
      ++moduleInfo.impactedFiles;
    } else {
      final ModuleInfo oldModuleInfo = this.moduleInfos.computeIfAbsent(oldModule, ModuleInfo::new);
      ++oldModuleInfo.impactedFiles;
      ++oldModuleInfo.emigrants;

      final ModuleInfo newModuleInfo = this.moduleInfos.computeIfAbsent(newModule, ModuleInfo::new);
      ++newModuleInfo.immigrants;
    }
  }

  /**
   * Metadata information about a mapping generated by {@link MappingGenerator}, specific to a
   * module.
   *
   * @author ActiveViam
   */
  private static class ModuleInfo {

    /** Constructor. */
    private ModuleInfo(final String name) {
      this.name = name;
    }

    /** Module name. */
    private final String name;

    /**
     * Number of files that have been moved from this module to any module (potentially this one).
     */
    private int impactedFiles = 0;

    /** Number of files that have been moved from this module to another module. */
    private int emigrants = 0;

    /** Number of files that have been moved into this module from another module. */
    private int immigrants = 0;

    @Override
    public String toString() {
      return new StringBuilder(this.name)
          .append(" | ")
          .append(this.impactedFiles)
          .append(" (")
          .append(this.immigrants)
          .append("/")
          .append(this.emigrants)
          .append(")")
          .toString();
    }
  }

  @Override
  public String toString() {
    final StringBuilder sb =
        new StringBuilder("MAPPING SUMMARY")
            .append(MigrationUtils.LINE_SEPARATOR)
            .append("Repository name: ")
            .append(this.repositoryName)
            .append(MigrationUtils.LINE_SEPARATOR)
            .append("From ")
            .append(this.currentVersion)
            .append(" to ")
            .append(this.targetVersion)
            .append(MigrationUtils.LINE_SEPARATOR)
            .append("Total size: ")
            .append(getTotalMappingSize())
            .append(MigrationUtils.LINE_SEPARATOR)
            .append("Total execution time: ")
            .append(this.executionTime)
            .append(MigrationUtils.LINE_SEPARATOR)
            .append("Impacted modules: ")
            .append(this.moduleInfos.size())
            .append(MigrationUtils.LINE_SEPARATOR)
            .append("\tmodule name | impacted files number (in/out)")
            .append(MigrationUtils.LINE_SEPARATOR);
    this.moduleInfos.values().stream()
        .map(ModuleInfo::toString)
        .forEach(
            moduleInfo -> sb.append("\t").append(moduleInfo).append(MigrationUtils.LINE_SEPARATOR));
    return sb.toString();
  }

  private int getTotalMappingSize() {
    return this.moduleInfos.values().stream()
        .mapToInt(moduleInfo -> moduleInfo.impactedFiles)
        .sum();
  }
}
